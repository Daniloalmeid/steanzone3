ATVI.components.carousel = ATVI.components.carousel || {};

(function($, ATVI) {

    var carousel = ATVI.components.carousel;

    window.ATVIVideoEls = window.ATVIVideoEls || [];
    var ytArr = []; //holds ATVI video elements
    var parentEl, overlay, modalContent, mediaContent, thumb, close, thumbsContainer;

    var defineElements = function(el) {

        parentEl        = el;
		overlay         = el.find(".modal-overlay");
        thumbsContainer = el.find(".atvi-inner-carousel-container");
        thumb           = thumbsContainer.find(".slide-child");
        modalContent    = overlay.find(".modal-content");
        mediaContent    = modalContent.find(".media-content");
        close           = overlay.find(".modal-close");

    };

    var initModals = function() {

        //Thumbnail click
        thumb.on("click", function() {

            openModal($(this)); //open modal and pass in thumb element

            initAnalytics($(this));

        });

        //Close modal on close button or background
        overlay.add(close).click(function(e) {

            pauseVideo(); //pause all videos ... just in case one is in the middle of playing
            $(this).closest(".atvi-carousel-container").find(".modal-overlay").fadeOut();
            //overlay.fadeOut(); //overlay fades out

        });

        //if you click inside modal, nothing happens
		modalContent.on("click", function(e) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
        });

        //Modal navigation
        overlay.find(".modal-nav-prev").on("click", function() {

			var curSlide = mediaContent.find(".modal-item.current"); //get current slide
            var newSlide = curSlide.prev(); //find the previous slide
            if(newSlide.length == 0) newSlide = mediaContent.find(".modal-item").filter(":last-of-type"); //if there is no previous slide, then previous slide equals the last slide in list

            curSlide.removeClass("current"); //remove "current" class from current slide
            if(curSlide.data("type") == "video") pauseVideo(); //if we're navigating away from current slide and is a video, then pause the video
            newSlide.addClass("current"); //set new slide as the current slide

        });

        overlay.find(".modal-nav-next").on("click", function() {

			var curSlide = mediaContent.find(".modal-item.current"); //get current slide
            var newSlide = curSlide.next(); //find the next slide
            if(newSlide.length == 0) newSlide = mediaContent.find(".modal-item").filter(":first-of-type"); //if next slide does not exist, then the first slide in list is the next slide

            curSlide.removeClass("current"); //remove "current" class from current slide
            if(curSlide.data("type") == "video") pauseVideo(); //if we're navigating away from current slide and is a video, then pause the video
            newSlide.addClass("current"); //set new slide as the current slide

        });


    };

    var openModal = function(selectedThumb) {

        var selectedId = selectedThumb.data("id"); //get id of selected thumbnail that was clicked to open the modal
        var $modalOverlay = selectedThumb.closest(".atvi-carousel-container").find(".modal-overlay");

        $modalOverlay.find(".modal-item").removeClass("current");
        
        $modalOverlay.find(".modal-item").each(function(idx) {

            if($(this).data("id") == selectedId) {
				$(this).addClass("current");
            }

        });

        //Fade in overlay
        $modalOverlay.fadeIn();

    };

    var buildYtVideo = function(ytid, vidId) {

        var youtubeId = ytid,
            elId = vidId,
            $wrapperEl = $('<div>', {'id': elId, 'class': 'atvi-video-component', 'data-youtube-id': youtubeId}),
            $inner = $('<div>', { 'class': 'player atvi-instrument atvi-instrument-video-player'}),
            $embedEl = $('<div>', {'id': elId + '-embed'}),
            $el = $wrapperEl.append($inner.append($embedEl)),
            configObj = { youtubeId: youtubeId, start: 0, customControls: false };
        
        window.ATVIVideoEls.push({
            $el: $el,
            config: configObj
        });
        
        ytArr.push($el);
        
        ATVI.library.withDependency('atvi-video', function() {
            if (!ATVI.components.video.YTScriptLoaded) ATVI.components.video.initYtAPI();
            else {
                ATVI.components.video.generatePlayer($el, configObj);
                if (!$el.find('.' + $el.attr('id') + '-embed').children().length) {
                    setTimeout(function() {
                        ATVI.components.video.purgeContext($el);
                        ATVI.components.video.generatePlayer($el, configObj);
                    }, 500);
                }
            }
        });
        
        return $el;
    };

    var pauseVideo = function() {
		var i;
        for (i = 0; i < ytArr.length; i++) {
			var c = ATVI.components.video.getContext(ytArr[i]);
            if (c && c.pause) c.pause();
        }
    };

    var initAnalytics = function($el) {

        if(!digitalData || !dataLayer) return;

        var d = digitalData.page.pageInfo;

		var name = $el.attr("id") || "carousel-item";
        var moduleName = $el.closest(".atvi-carousel-container").attr("id");
        var category = "interaction:" + d.pageName;
        var label = "modal";
		var videoTitle = $el.attr("data-youtubetitle");

        //If slide child opens video modal
        if(videoTitle) {

            dataLayer.push({
                action: moduleName + ":" + name,
                event: "interaction",
                category: category,
                label: label,
                video_title: videoTitle,
                video_provider: "youtube"
            });

        }

        //If slide child opens image modal
        else {

			dataLayer.push({
                action: moduleName + ":" + name,
                event: "interaction",
                category: category,
                labl:  label
            });

        }
    };

    var init = function(el) {

        //Add all videos that need to be added inside main carousel
        var slides = el.find(".slide-child");
        slides.each(function(idx) {
            if($(this).data("type") == "video") {
                
                var ytid = $(this).data("ytid");
                var uid  = $(this).attr("id") + "-" + idx;
                var vid = buildYtVideo(ytid, uid);
                if(el.data("modal") == "no") $(this).find(".slide-content").append(vid);

                //Add videos into the modal
                if(el.data("modal") == "yes") el.find(".modal-overlay .modal-item[data-id='" + (idx+1) + "'] .media-item-content").append(vid);

            }
        });

        //If modal mode is enabled
        if(el.data("modal") == "yes") {
            defineElements(el);
            initModals();
        } 
        else {
            //Click handlers for main carousel navigation
            el.on("click", 'button.slick-arrow', function() {
                pauseVideo();
            });
        }

    };

    ATVI.components.carousel.init = init;

})(jQuery, ATVI);
